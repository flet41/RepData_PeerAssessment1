par(mfrow=c(1,1),mar=c(6,4,4,4))
plot(hClustering)
par(mfrow=c(1,1),mar=c(6,4,4,5))
plot(hClustering)
par(mfrow=c(1,1),mar=c(6,5,4,5))
plot(hClustering)
myplclust<-function(hclust, lab=hclust$labels, lab.col=rep(1, length(hclust$labels)), hang=.1, ...){
y<-rep(hclust$height, 2)
x<-as.numeric(hclust$merge)
y<-y[which(x<0)]
x<-w[which(x<0)]
x<-abs(x)
y<-y[order(x)]
x<-x[order(x)]
plot(hclust, labels=FALSE, hang=hang,...)
text(x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order],
col=lab.col[hclust$order], srt=90, adj=c(1,.5, xpd=NA,...)
}
hclust
dataFrame<-data.frame(x=x, y=y)
set.seed(143)
dataMatrix<-as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)
par(mfrow=c(1,1),mar=c(6,5,4,5))
x<-rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each=4), sd=.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+.05, y+.05, labels=as.character(1:12))
set.seed(1234)
par(mfrow=c(1,1),mar=c(6,5,4,5))
x<-rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each=4), sd=.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+.05, y+.05, labels=as.character(1:12))
dataFrame<-data.frame(x,y)
kmeansObj<-kmeans(dataFrame, centers=3)
names(kmeansObj)
kmeansObj
kmeansObj$cluster
par(mar=rep(.2, 4))
plot(x,y, col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
set.seed(1234)
dataMatrix<-as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2<-kmeans(dataMatrix, centers=3)
par(mfrow=c(1,2), mar=c(2,4,.1,.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt="n")
image(t(dataMatrix)[,order(kmeansObj$cluster)], yaxt="n")
set.seed(12345)
par(mar=rep(.2,4))
dataMatrix<-matrix(rnorm(400, nrow=40))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix<-matrix(rnorm(400), nrow=40))
dataMatrix<-matrix(rnorm(400), nrow=40)
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(12345)
par(mar=rep(.2,4))
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){
#flip a coin
coinFlip<-rbinom(1, size=1, prob=.5)
#if coins is heads add a comon pattern to that row
if(coinFlip){
dataMatrix[i, ]<-dataMatrix[i, ] +rep(c(0,3), each=5)
}
}
par(mar=rep(.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$$order, ]
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered, 40:1, , xlab="Row Mean", ylab="Row", pch=19)
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
dataMatrixOrdered<-dataMatrix[hh$$order, ]
dataMatrixOrdered<-dataMatrix[hh$order, ]
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
plot(colMeans(dataMatrixOrdered), xlab="Column", ylab="Column Mean", pch=19)
par(mfrow=c(3,6))
par(mfrow=c(1,3), mar=c(4,4,4,4))
par(mfrow=c(1,3), mar=c(4,4,4,4))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
plot(colMeans(dataMatrixOrdered), xlab="Column", ylab="Column Mean", pch=19)
par(mfrow=c(1,3), mar=c(5,5,5,5,))
par(mfrow=c(1,3), mar=c(5,5,5,5))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab="Row", pch=19)
plot(colMeans(dataMatrixOrdered), xlab="Column", ylab="Column Mean", pch=19)
pal<-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(.5)
pal(seq(0,1,len=10))
pal<-colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library(RColorBrewer)
cols<-brewer.pal(3, "BuGn")
cols
pal<-colorRampPalette(cols)
image(volcano, col=pal(20))
y<-rnorm(10000)
x<-rnorm(10000)
smoothScatter(x,y)
plot(x,y,pch=19)
plot(x,y,col=rgb(0,0,0,.2), pch=19)
plot(x,y,col=rgb(0,0,0,.2), pch=19)
library(swirl)
swirl()
rm(list=ls())
hist(bydaySum$steps, binwidth=4)
?hist
hist(bydaySum$steps, break=4)
hist(bydaySum$steps, breaks=4)
hist(bydaySum$steps, breaks=10)
Course Project 1
================
Load the Data
```{r}
# Code for reading the data
activity<-read.csv("activity.csv")
```
The total number of steps per day
```{r}
##The total number of steps taken each day
bydaySum<-(aggregate(steps~date,data=activity,FUN=sum))
bydaySum
```
A histogram of the total number of steps per day
```{R}
##Histogram of total number of steps taken each day
hist(bydaySum$steps, breaks=10)
?hist
```
The mean and median of the total number of steps taken per day
```{R}
#the mean and median of the total number of steps taken per day
mean(bydaySum$steps)
median(bydaySum$steps)
```
The average daily activity pattern
```{R}
#plot total of daily average number of steps taken per interval
int<-aggregate(steps~interval,data=activity, FUN=mean)
intPlot<-with(int,plot(steps, interval, type="l"))
```
The five-minute interval that contains the maximum number of steps
```{R}
int[which.max(int$steps), ]
```
Imputing Missing Values
The total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{R}
sum(is.na(activity))
```
Create a new dataset that fills in missing values using mean for each day
```{R}
#create a new dataset with the NA values filled in
activity2<-activity
naValues<-is.na(activity2$steps)
interval_mean<-tapply(activity2$steps, activity2$interval, mean, na.rm=TRUE, simplify=TRUE)
activity2$steps[naValues]<-interval_mean[as.character(activity2$interval[naValues])]
names(activity2)
sum(is.na(activity2))
```
Histogram of the total number of step taken each day
```{R}
bydaySum2<-(aggregate(steps~date,data=activity2,FUN=sum))
hist(bydaySum2$steps)
```
The mean and median total number of steps taken per day
```{R}
mean(bydaySum2$steps)
median(bydaySum2$steps)
```
The mean and median do not differ.  The histogram is different.
The impact of imputing missing data on the estimates of the total daily number of steps?
```{R}
summary(bydaySum)
summary(bydaySum2)
```
Are there any difference in activity patterns between weekdays and weekends?
```{R}
#create a new factor variable in the dataset with two levels-"weekday" and "weekend"
activity2$date<-as.Date(activity2$date)
weekdays1<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$weekDay<-factor((weekdays(activity2$date) %in% weekdays1),levels=c(FALSE, TRUE), labels = c("Weekend", "Weekday"))
```
A panel plot containing a time series plot of the 5-minute interval and the average number of steps taken, averaged across all weekdays or weekenend days
```{R}
library(lattice)
xyplot(steps~interval|weekDay, data=activity2, layout=c(1,2), type="l")
```
activity<-read.csv("activity.csv")
getwd()
setwd("./data/ReproducibileResearch/CourseProject2/repdata_data_activity"")
setwd("./data/ReproducibileResearch/CourseProject2/repdata_data_activity")
setwd("./data/ReproducibileResearch/CourseProject2/repdata_data_activity")
getwd()
setwd("./data/ReproducibleResearch/CourseProject2/repdata_data_activity")
getwd()
activity<-read.csv("activity.csv")
Course Project 1
================
Load the Data
```{r}
# Code for reading the data
getwd()
setwd("./data/ReproducibleResearch/CourseProject2/repdata_data_activity")
activity<-read.csv("activity.csv")
```
The total number of steps per day
```{r}
##The total number of steps taken each day
bydaySum<-(aggregate(steps~date,data=activity,FUN=sum))
bydaySum
```
A histogram of the total number of steps per day
```{R}
##Histogram of total number of steps taken each day
hist(bydaySum$steps, breaks=10)
?hist
```
The mean and median of the total number of steps taken per day
```{R}
#the mean and median of the total number of steps taken per day
mean(bydaySum$steps)
median(bydaySum$steps)
```
The average daily activity pattern
```{R}
#plot total of daily average number of steps taken per interval
int<-aggregate(steps~interval,data=activity, FUN=mean)
intPlot<-with(int,plot(steps, interval, type="l"))
```
The five-minute interval that contains the maximum number of steps
```{R}
int[which.max(int$steps), ]
```
Imputing Missing Values
The total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{R}
sum(is.na(activity))
```
Create a new dataset that fills in missing values using mean for each day
```{R}
#create a new dataset with the NA values filled in
activity2<-activity
naValues<-is.na(activity2$steps)
interval_mean<-tapply(activity2$steps, activity2$interval, mean, na.rm=TRUE, simplify=TRUE)
activity2$steps[naValues]<-interval_mean[as.character(activity2$interval[naValues])]
names(activity2)
sum(is.na(activity2))
```
Histogram of the total number of step taken each day
```{R}
bydaySum2<-(aggregate(steps~date,data=activity2,FUN=sum))
hist(bydaySum2$steps)
```
The mean and median total number of steps taken per day
```{R}
mean(bydaySum2$steps)
median(bydaySum2$steps)
```
The mean and median do not differ.  The histogram is different.
The impact of imputing missing data on the estimates of the total daily number of steps?
```{R}
summary(bydaySum)
summary(bydaySum2)
```
Are there any difference in activity patterns between weekdays and weekends?
```{R}
#create a new factor variable in the dataset with two levels-"weekday" and "weekend"
activity2$date<-as.Date(activity2$date)
weekdays1<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$weekDay<-factor((weekdays(activity2$date) %in% weekdays1),levels=c(FALSE, TRUE), labels = c("Weekend", "Weekday"))
```
A panel plot containing a time series plot of the 5-minute interval and the average number of steps taken, averaged across all weekdays or weekenend days
```{R}
library(lattice)
xyplot(steps~interval|weekDay, data=activity2, layout=c(1,2), type="l")
```
getwd()
setwd("C:/users/robert/documents/data/ReproducibleResearch/CourseProject2/repdata_data_activity")
getwd()
hist(bydaySum2$steps, breaks=20)
hist(bydaySum2$steps)
hist(bydaySum2$steps, breaks=10)
hist(bydaySum2$steps, breaks=20)
hist(bydaySum2$steps, breaks=10)
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day")
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day ")
summary(bydaySum2)
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day", ylim=C(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day", ylim=C(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day", ylim=C(0, 30), prob=T)
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day", ylim=c(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Steps by Day", main="Histogram of Average Steps per Day", ylim=c(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Total Steps by Day", main="Histogram of Average Steps per Day", ylim=c(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 30))
hist(bydaySum2$steps, breaks=10, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 30), col="blue")
hist(bydaySum2$steps, breaks=10, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 30), col="red")
Course Project 1
================
Load the Data
```{r}
# Code for reading the data
getwd()
setwd("C:/users/robert/documents/data/ReproducibleResearch/CourseProject2/repdata_data_activity")
activity<-read.csv("activity.csv")
```
The total number of steps per day
```{r}
##The total number of steps taken each day
bydaySum<-(aggregate(steps~date,data=activity,FUN=sum))
bydaySum
```
A histogram of the total number of steps per day
```{R}
##Histogram of total number of steps taken each day
hist(bydaySum$steps, breaks=10)
?hist
```
The mean and median of the total number of steps taken per day
```{R}
#the mean and median of the total number of steps taken per day
mean(bydaySum$steps)
median(bydaySum$steps)
```
The average daily activity pattern
```{R}
#plot total of daily average number of steps taken per interval
int<-aggregate(steps~interval,data=activity, FUN=mean)
intPlot<-with(int,plot(steps, interval, type="l"))
```
The five-minute interval that contains the maximum number of steps
```{R}
int[which.max(int$steps), ]
```
Imputing Missing Values
The total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{R}
sum(is.na(activity))
```
Create a new dataset that fills in missing values using mean for each day
```{R}
#create a new dataset with the NA values filled in
activity2<-activity
naValues<-is.na(activity2$steps)
interval_mean<-tapply(activity2$steps, activity2$interval, mean, na.rm=TRUE, simplify=TRUE)
activity2$steps[naValues]<-interval_mean[as.character(activity2$interval[naValues])]
names(activity2)
sum(is.na(activity2))
```
Histogram of the total number of step taken each day
```{R}
bydaySum2<-(aggregate(steps~date,data=activity2,FUN=sum))
hist(bydaySum2$steps, breaks=10, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 30), col="red")
```
The mean and median total number of steps taken per day
```{R}
mean(bydaySum2$steps)
median(bydaySum2$steps)
```
The mean and median do not differ.  The histogram is different.
The impact of imputing missing data on the estimates of the total daily number of steps?
```{R}
summary(bydaySum)
summary(bydaySum2)
```
Are there any difference in activity patterns between weekdays and weekends?
```{R}
#create a new factor variable in the dataset with two levels-"weekday" and "weekend"
activity2$date<-as.Date(activity2$date)
weekdays1<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$weekDay<-factor((weekdays(activity2$date) %in% weekdays1),levels=c(FALSE, TRUE), labels = c("Weekend", "Weekday"))
```
A panel plot containing a time series plot of the 5-minute interval and the average number of steps taken, averaged across all weekdays or weekenend days
```{R}
library(lattice)
xyplot(steps~interval|weekDay, data=activity2, layout=c(1,2), type="l")
```
hist(bydaySum$steps, breaks=10)
hist(bydaySum$steps, breaks=10, col="red")
hist(bydaySum$steps, breaks=10, col="red", ylim = c(0,30))
hist(bydaySum$steps, breaks=10, col="red", ylim = c(0,20))
hist(bydaySum$steps, breaks=10, col="red", ylim = c(0,20), main="Average of Total Daily Steps")
hist(bydaySum$steps, breaks=10, col="red", ylim = c(0,20), main="Average of Total Daily Steps", xlab="Steps")
library(xtable)
xtable(bydaySum)
intPlot<-with(int,plot(interval, steps, type="l"))
intPlot<-with(int,plot(interval, steps, type="l", main="Average Daily Activity Pattern"))
intPlot<-with(int,plot(interval, steps, type="l", main="Average Daily Activity Pattern", col="red"))
)
intPlot<-with(int,plot(interval, steps, type="l", main="Average Daily Activity Pattern", col="red", lwd=2))
hist(bydaySum2$steps, breaks=20, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 30), col="red")
hist(bydaySum2$steps, breaks=20, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 20), col="red")
hist(bydaySum2$steps, breaks=15, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 20), col="red")
bydaySum2<-(aggregate(steps~date,data=activity2,FUN=sum))
hist(bydaySum2$steps, breaks=15, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps per Day", ylim=c(0, 25), col="red")
View(activity2)
View(int)
int2<-aggregate(steps~interval,data=activity2, FUN=mean)
View(int2)
int2<-aggregate(steps~interval+weekDay,data=activity2, FUN=mean)
View(int2)
int2<-aggregate(steps~weekDay+interval,data=activity2, FUN=mean)
xyplot(steps~interval|weekDay, data=int2, layout=c(1,2), type="l")
xyplot(steps~interval|weekDay, data=int2, layout=c(1,2), type="l", color="red")
xyplot(steps~interval|weekDay, data=int2, layout=c(1,2), type="l", color="red")
xyplot(steps~interval|weekDay, data=int2, layout=c(1,2), type="l", col="red")
hist(bydaySum2$steps, breaks=15, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps with Missing Values per Day", ylim=c(0, 25), col="red")
rm(list=ls())
Reproducible Research Course Project 1
================
rm(list=ls())
Load the Data
```{r}
# Code for reading the data
getwd()
setwd("C:/users/robert/documents/data/ReproducibleResearch/CourseProject2/repdata_data_activity")
activity<-read.csv("activity.csv")
```
The total number of steps per day
```{r}
##The total number of steps taken each day
bydaySum<-(aggregate(steps~date,data=activity,FUN=sum))
bydaySum
```
A histogram of the total number of steps per day
```{R}
##Histogram of total number of steps taken each day
hist(bydaySum$steps, breaks=10, col="red", ylim = c(0,20), main="Average of Total Daily Steps", xlab="Steps")
```
The mean and median of the total number of steps taken per day
```{R}
#the mean and median of the total number of steps taken per day
mean(bydaySum$steps)
median(bydaySum$steps)
```
The average daily activity pattern
```{R}
#plot total of daily average number of steps taken per interval
int<-aggregate(steps~interval,data=activity, FUN=mean)
intPlot<-with(int,plot(interval, steps, type="l", main="Average Daily Activity Pattern", col="red", lwd=2))
```
The five-minute interval that contains the maximum number of steps
```{R}
int[which.max(int$steps), ]
```
Imputing Missing Values
The total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{R}
sum(is.na(activity))
```
Create a new dataset that fills in missing values using mean for each day
```{R}
#create a new dataset with the NA values filled in
activity2<-activity
naValues<-is.na(activity2$steps)
interval_mean<-tapply(activity2$steps, activity2$interval, mean, na.rm=TRUE, simplify=TRUE)
activity2$steps[naValues]<-interval_mean[as.character(activity2$interval[naValues])]
names(activity2)
sum(is.na(activity2))
```
Histogram of the total number of step taken each day
```{R}
bydaySum2<-(aggregate(steps~date,data=activity2,FUN=sum))
hist(bydaySum2$steps, breaks=15, xlab="Average Total Steps by Day", main="Histogram of Average Total Steps with Missing Values per Day", ylim=c(0, 25), col="red")
```
The mean and median total number of steps taken per day
```{R}
mean(bydaySum2$steps)
median(bydaySum2$steps)
```
The mean and median do not differ.  The histogram is different.
The impact of imputing missing data on the estimates of the total daily number of steps?
```{R}
summary(bydaySum)
summary(bydaySum2)
```
Are there any difference in activity patterns between weekdays and weekends?
```{R}
#create a new factor variable in the dataset with two levels-"weekday" and "weekend"
activity2$date<-as.Date(activity2$date)
weekdays1<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$weekDay<-factor((weekdays(activity2$date) %in% weekdays1),levels=c(FALSE, TRUE), labels = c("Weekend", "Weekday"))
```
A panel plot containing a time series plot of the 5-minute interval and the average number of steps taken, averaged across all weekdays or weekenend days
```{R}
library(lattice)
int2<-aggregate(steps~weekDay+interval,data=activity2, FUN=mean)
xyplot(steps~interval|weekDay, data=int2, layout=c(1,2), type="l", col="red")
```
opts_chunk$set(dev='png')
install.packages("knitr")
setwd("C:/users/robert/documents/data/ReproducibleResearch/CourseProject2/repdata_data_activity")
activity<-read.csv("activity.csv")
